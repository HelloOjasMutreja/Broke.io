# Generated by Django 5.2.7 on 2025-10-22 16:46

import django.core.validators
import django.db.models.deletion
import game.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('size', models.PositiveIntegerField(help_text='n for an n*n board. Valid positions = 0 .. (n*n - 1).', validators=[django.core.validators.MinValueValidator(2)])),
                ('theme', models.CharField(blank=True, max_length=80)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('tile_type', models.CharField(choices=[('CITY', 'City'), ('UTILITY', 'Utility'), ('CHANCE', 'Chance'), ('TREASURE', 'Treasure'), ('TAX', 'Tax'), ('START', 'Start'), ('JAIL', 'Jail'), ('GO_TO_JAIL', 'GoToJail'), ('FREE_PARKING', 'FreeParking'), ('CUSTOM', 'Custom')], default='CUSTOM', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('action', models.JSONField(blank=True, default=dict)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BoardTile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(help_text='Position index on the board. Must be in range [0, board.size*board.size - 1].')),
                ('override_action', models.JSONField(blank=True, default=dict)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_tiles', to='game.board')),
                ('tile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='game.tile')),
            ],
            options={
                'ordering': ['position'],
                'unique_together': {('board', 'position')},
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('public_id', models.CharField(default=game.models.generate_public_id, max_length=12, unique=True)),
                ('name', models.CharField(blank=True, max_length=140)),
                ('status', models.CharField(choices=[('LOBBY', 'Lobby'), ('READY', 'ReadyToStart'), ('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('FINISHED', 'Finished')], default='LOBBY', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('max_players', models.PositiveSmallIntegerField(default=6)),
                ('allow_spectators', models.BooleanField(default=True)),
                ('state', models.JSONField(blank=True, default=dict)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='games', to='game.board')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_games', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(max_length=80)),
                ('is_ai', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GameBoardTileState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField()),
                ('houses', models.PositiveSmallIntegerField(default=0)),
                ('mortgaged', models.BooleanField(default=False)),
                ('last_rent_collected_at', models.DateTimeField(blank=True, null=True)),
                ('board_tile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_states', to='game.boardtile')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tile_states', to='game.game')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_tiles', to='game.player')),
            ],
            options={
                'ordering': ['position'],
                'unique_together': {('game', 'position')},
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_system', models.BooleanField(default=False)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='game.game')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='game.player')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Bid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.BigIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bids', to='game.game')),
                ('board_tile_state', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='game.gameboardtilestate')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.player')),
            ],
        ),
        migrations.CreateModel(
            name='ActionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(max_length=80)),
                ('payload', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='game.game')),
                ('player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='game.player')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(blank=True, help_text='Optional locale metadata', max_length=80)),
                ('base_price', models.PositiveIntegerField(default=100)),
                ('mortgage_value', models.PositiveIntegerField(default=50)),
                ('rent_base', models.PositiveIntegerField(default=10)),
                ('rent_house_1', models.PositiveIntegerField(default=50)),
                ('rent_house_2', models.PositiveIntegerField(default=150)),
                ('rent_house_3', models.PositiveIntegerField(default=450)),
                ('rent_house_4', models.PositiveIntegerField(default=625)),
                ('rent_hotel', models.PositiveIntegerField(default=750)),
                ('house_cost', models.PositiveIntegerField(default=50)),
                ('hotel_cost', models.PositiveIntegerField(default=50)),
                ('color_group', models.CharField(blank=True, help_text='Group e.g., Boardwalk-set', max_length=40)),
                ('tile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='city', to='game.tile')),
            ],
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('offered', models.JSONField(default=dict)),
                ('requested', models.JSONField(default=dict)),
                ('accepted', models.BooleanField(default=None, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades', to='game.game')),
                ('offered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_trades', to='game.player')),
                ('offered_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incoming_trades', to='game.player')),
            ],
        ),
        migrations.CreateModel(
            name='Turn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('current_player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='game.player')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='turns', to='game.game')),
            ],
        ),
        migrations.CreateModel(
            name='LobbyPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seat_index', models.PositiveSmallIntegerField(default=0)),
                ('cash', models.BigIntegerField(default=1500)),
                ('position', models.PositiveIntegerField(default=0)),
                ('is_ready', models.BooleanField(default=False)),
                ('is_owner', models.BooleanField(default=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lobby_players', to='game.game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_slots', to='game.player')),
            ],
            options={
                'ordering': ['seat_index'],
                'unique_together': {('game', 'seat_index')},
            },
        ),
    ]
