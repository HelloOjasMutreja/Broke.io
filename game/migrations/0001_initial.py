# Generated by Django 5.2.7 on 2025-10-15 11:51

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the game board', max_length=200, verbose_name='Board Name')),
                ('width', models.PositiveIntegerField(default=11, help_text='Width of the board in tiles', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)], verbose_name='Board Width')),
                ('height', models.PositiveIntegerField(default=11, help_text='Height of the board in tiles', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)], verbose_name='Board Height')),
                ('description', models.TextField(blank=True, help_text='Description of the board layout and theme', verbose_name='Description')),
                ('theme', models.CharField(choices=[('classic', 'Classic'), ('cyber', 'Cyber'), ('fantasy', 'Fantasy'), ('space', 'Space')], default='classic', max_length=50, verbose_name='Theme')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this board is available for new games', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Board',
                'verbose_name_plural': 'Boards',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of this game session', max_length=200, verbose_name='Game Name')),
                ('mode', models.CharField(choices=[('solo', 'Solo'), ('friends', 'Friends'), ('online', 'Online')], default='solo', max_length=20, verbose_name='Game Mode')),
                ('status', models.CharField(choices=[('waiting', 'Waiting for Players'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='waiting', max_length=20, verbose_name='Game Status')),
                ('max_players', models.PositiveIntegerField(default=4, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(8)], verbose_name='Maximum Players')),
                ('turn_time_limit', models.PositiveIntegerField(default=60, help_text='Time limit for each turn in seconds', validators=[django.core.validators.MinValueValidator(30)], verbose_name='Turn Time Limit (seconds)')),
                ('starting_money', models.PositiveIntegerField(default=1500, help_text='Amount of money each player starts with', verbose_name='Starting Money')),
                ('victory_condition', models.CharField(choices=[('last_standing', 'Last Player Standing'), ('most_wealth', 'Most Wealth'), ('territory_control', 'Territory Control'), ('points', 'Points')], default='last_standing', max_length=100, verbose_name='Victory Condition')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Started At')),
                ('ended_at', models.DateTimeField(blank=True, null=True, verbose_name='Ended At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='game.board', verbose_name='Board')),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Player Name')),
                ('token', models.CharField(default='ðŸš—', help_text='Visual representation of the player', max_length=10, verbose_name='Player Token')),
                ('is_human', models.BooleanField(default=True, help_text='Whether this is a human player or AI', verbose_name='Is Human')),
                ('money', models.IntegerField(default=1500, help_text='Current money/currency balance', verbose_name='Money')),
                ('position', models.PositiveIntegerField(default=0, help_text='Current position on the board', verbose_name='Board Position')),
                ('score', models.IntegerField(default=0, help_text="Player's current score", verbose_name='Score')),
                ('experience', models.PositiveIntegerField(default=0, verbose_name='Experience Points')),
                ('level', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Level')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the player is still in the game', verbose_name='Is Active')),
                ('is_in_jail', models.BooleanField(default=False, verbose_name='In Jail')),
                ('turn_order', models.PositiveIntegerField(default=0, help_text='Order in which this player takes turns', verbose_name='Turn Order')),
                ('color', models.CharField(blank=True, help_text='Color associated with this player', max_length=50, verbose_name='Player Color')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='game.game', verbose_name='Game')),
                ('user', models.ForeignKey(blank=True, help_text='Associated user account (null for AI players)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='game_players', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Player',
                'verbose_name_plural': 'Players',
                'ordering': ['game', 'turn_order'],
            },
        ),
        migrations.AddField(
            model_name='game',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_games', to='game.player', verbose_name='Winner'),
        ),
        migrations.CreateModel(
            name='PowerUp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('powerup_type', models.CharField(choices=[('double_rent', 'Double Rent'), ('immunity', 'Immunity'), ('fast_travel', 'Fast Travel'), ('discount', 'Purchase Discount'), ('steal', 'Steal Property'), ('protection', 'Protection Shield'), ('boost', 'Resource Boost'), ('vision', 'Reveal Information')], max_length=20, verbose_name='PowerUp Type')),
                ('name', models.CharField(max_length=100, verbose_name='PowerUp Name')),
                ('description', models.TextField(help_text='What this powerup does', verbose_name='Description')),
                ('duration', models.PositiveIntegerField(default=1, help_text='Number of turns this powerup lasts', verbose_name='Duration (turns)')),
                ('is_active', models.BooleanField(default=False, help_text='Whether this powerup is currently active', verbose_name='Is Active')),
                ('is_used', models.BooleanField(default=False, help_text='Whether this powerup has been used', verbose_name='Is Used')),
                ('acquired_at', models.DateTimeField(auto_now_add=True, verbose_name='Acquired At')),
                ('activated_at', models.DateTimeField(blank=True, null=True, verbose_name='Activated At')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expires At')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='powerups', to='game.player', verbose_name='Player')),
            ],
            options={
                'verbose_name': 'PowerUp',
                'verbose_name_plural': 'PowerUps',
                'ordering': ['-acquired_at'],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_type', models.CharField(choices=[('food', 'Food'), ('gold', 'Gold'), ('energy', 'Energy'), ('wood', 'Wood'), ('stone', 'Stone'), ('iron', 'Iron'), ('gems', 'Gems'), ('influence', 'Influence')], max_length=20, verbose_name='Resource Type')),
                ('amount', models.IntegerField(default=0, help_text='Current amount of this resource', verbose_name='Amount')),
                ('capacity', models.PositiveIntegerField(default=1000, help_text='Maximum storage capacity for this resource', verbose_name='Storage Capacity')),
                ('production_rate', models.IntegerField(default=0, help_text='Amount produced per turn', verbose_name='Production Rate')),
                ('consumption_rate', models.IntegerField(default=0, help_text='Amount consumed per turn', verbose_name='Consumption Rate')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='game.player', verbose_name='Player')),
            ],
            options={
                'verbose_name': 'Resource',
                'verbose_name_plural': 'Resources',
                'ordering': ['player', 'resource_type'],
            },
        ),
        migrations.CreateModel(
            name='Tile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(help_text='Position on the board (0-39 for standard board)', verbose_name='Position')),
                ('x_coordinate', models.IntegerField(help_text='X position in grid', verbose_name='X Coordinate')),
                ('y_coordinate', models.IntegerField(help_text='Y position in grid', verbose_name='Y Coordinate')),
                ('name', models.CharField(max_length=100, verbose_name='Tile Name')),
                ('terrain_type', models.CharField(choices=[('property', 'Property'), ('railroad', 'Railroad'), ('utility', 'Utility'), ('corner', 'Corner'), ('chance', 'Chance'), ('community_chest', 'Community Chest'), ('tax', 'Tax'), ('go', 'Go'), ('jail', 'Jail'), ('free_parking', 'Free Parking'), ('go_to_jail', 'Go to Jail')], default='property', max_length=20, verbose_name='Terrain Type')),
                ('price', models.PositiveIntegerField(default=0, verbose_name='Purchase Price')),
                ('rent', models.PositiveIntegerField(default=0, verbose_name='Rent Amount')),
                ('color_group', models.CharField(blank=True, help_text='Property color group for monopoly bonuses', max_length=50, verbose_name='Color Group')),
                ('resource_yield', models.JSONField(blank=True, default=dict, help_text='Resources generated by this tile per turn', verbose_name='Resource Yield')),
                ('is_mortgaged', models.BooleanField(default=False, verbose_name='Is Mortgaged')),
                ('improvement_level', models.PositiveIntegerField(default=0, help_text='Number of houses/hotels (0-5)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)], verbose_name='Improvement Level')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiles', to='game.board', verbose_name='Board')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_tiles', to='game.player', verbose_name='Owner')),
            ],
            options={
                'verbose_name': 'Tile',
                'verbose_name_plural': 'Tiles',
                'ordering': ['board', 'position'],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='City Name')),
                ('level', models.PositiveIntegerField(default=1, help_text='Level of development (1-10)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='City Level')),
                ('population', models.PositiveIntegerField(default=100, verbose_name='Population')),
                ('defense', models.PositiveIntegerField(default=10, help_text='Defensive strength of the city', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Defense Points')),
                ('production_capacity', models.PositiveIntegerField(default=10, help_text='Resources produced per turn', verbose_name='Production Capacity')),
                ('storage_capacity', models.PositiveIntegerField(default=100, help_text='Maximum resources that can be stored', verbose_name='Storage Capacity')),
                ('health', models.PositiveIntegerField(default=100, help_text='Current health percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='City Health')),
                ('is_capital', models.BooleanField(default=False, help_text="Whether this is the player's capital city", verbose_name='Is Capital')),
                ('founded_at', models.DateTimeField(auto_now_add=True, verbose_name='Founded At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='game.player', verbose_name='Owner')),
                ('tile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='game.tile', verbose_name='Tile')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'ordering': ['-level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20, verbose_name='Trade Status')),
                ('initiator_offer', models.JSONField(default=dict, help_text='What the initiator is offering (money, resources, properties)', verbose_name='Initiator Offer')),
                ('recipient_offer', models.JSONField(default=dict, help_text='What the recipient is offering in return', verbose_name='Recipient Offer')),
                ('message', models.TextField(blank=True, help_text='Optional message with the trade offer', verbose_name='Message')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('responded_at', models.DateTimeField(blank=True, null=True, verbose_name='Responded At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades', to='game.game', verbose_name='Game')),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='initiated_trades', to='game.player', verbose_name='Initiator')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_trades', to='game.player', verbose_name='Recipient')),
            ],
            options={
                'verbose_name': 'Trade',
                'verbose_name_plural': 'Trades',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Turn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('turn_number', models.PositiveIntegerField(help_text='Sequential turn number in the game', verbose_name='Turn Number')),
                ('round_number', models.PositiveIntegerField(help_text='Game round (one round = all players take a turn)', verbose_name='Round Number')),
                ('phase', models.CharField(choices=[('roll', 'Roll Dice'), ('move', 'Move'), ('action', 'Take Action'), ('trade', 'Trade'), ('build', 'Build'), ('end', 'End Turn')], default='roll', max_length=20, verbose_name='Turn Phase')),
                ('dice_roll', models.JSONField(blank=True, default=dict, help_text='Dice roll results for this turn', verbose_name='Dice Roll')),
                ('actions_taken', models.JSONField(blank=True, default=list, help_text='List of actions performed during this turn', verbose_name='Actions Taken')),
                ('is_complete', models.BooleanField(default=False, verbose_name='Is Complete')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='turns', to='game.game', verbose_name='Game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='turns', to='game.player', verbose_name='Player')),
            ],
            options={
                'verbose_name': 'Turn',
                'verbose_name_plural': 'Turns',
                'ordering': ['game', '-turn_number'],
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('move', 'Move'), ('buy', 'Buy Property'), ('sell', 'Sell Property'), ('trade', 'Trade'), ('build', 'Build'), ('upgrade', 'Upgrade'), ('attack', 'Attack'), ('defend', 'Defend'), ('collect', 'Collect Resources'), ('pay', 'Pay'), ('roll_dice', 'Roll Dice'), ('draw_card', 'Draw Card'), ('use_powerup', 'Use Powerup'), ('pass', 'Pass Turn')], max_length=20, verbose_name='Action Type')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the action', verbose_name='Description')),
                ('amount', models.IntegerField(default=0, help_text='Monetary or resource amount involved', verbose_name='Amount')),
                ('data', models.JSONField(blank=True, default=dict, help_text='Additional action-specific data', verbose_name='Action Data')),
                ('is_successful', models.BooleanField(default=True, help_text='Whether the action was successful', verbose_name='Is Successful')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='game.player', verbose_name='Player')),
                ('target_player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='targeted_actions', to='game.player', verbose_name='Target Player')),
                ('target_tile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='actions', to='game.tile', verbose_name='Target Tile')),
                ('turn', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='game.turn', verbose_name='Turn')),
            ],
            options={
                'verbose_name': 'Action',
                'verbose_name_plural': 'Actions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['game', 'is_active'], name='game_player_game_id_3515d8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='player',
            unique_together={('game', 'turn_order')},
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['status', '-created_at'], name='game_game_status_2e64b5_idx'),
        ),
        migrations.AddIndex(
            model_name='game',
            index=models.Index(fields=['mode', 'status'], name='game_game_mode_4d2d85_idx'),
        ),
        migrations.AddIndex(
            model_name='powerup',
            index=models.Index(fields=['player', 'is_active'], name='game_poweru_player__ad5154_idx'),
        ),
        migrations.AddIndex(
            model_name='powerup',
            index=models.Index(fields=['player', 'is_used'], name='game_poweru_player__5fc280_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['player', 'resource_type'], name='game_resour_player__225165_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='resource',
            unique_together={('player', 'resource_type')},
        ),
        migrations.AddIndex(
            model_name='tile',
            index=models.Index(fields=['board', 'terrain_type'], name='game_tile_board_i_4d59f2_idx'),
        ),
        migrations.AddIndex(
            model_name='tile',
            index=models.Index(fields=['owner'], name='game_tile_owner_i_79a832_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tile',
            unique_together={('board', 'position'), ('board', 'x_coordinate', 'y_coordinate')},
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['player', '-level'], name='game_city_player__813bb9_idx'),
        ),
        migrations.AddIndex(
            model_name='city',
            index=models.Index(fields=['tile'], name='game_city_tile_id_2f2053_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['initiator', 'status'], name='game_trade_initiat_08c831_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['recipient', 'status'], name='game_trade_recipie_5618b2_idx'),
        ),
        migrations.AddIndex(
            model_name='trade',
            index=models.Index(fields=['-created_at'], name='game_trade_created_de5508_idx'),
        ),
        migrations.AddIndex(
            model_name='turn',
            index=models.Index(fields=['game', '-turn_number'], name='game_turn_game_id_182d62_idx'),
        ),
        migrations.AddIndex(
            model_name='turn',
            index=models.Index(fields=['player', '-started_at'], name='game_turn_player__c91a7f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='turn',
            unique_together={('game', 'turn_number')},
        ),
        migrations.AddIndex(
            model_name='action',
            index=models.Index(fields=['player', '-created_at'], name='game_action_player__62dd3c_idx'),
        ),
        migrations.AddIndex(
            model_name='action',
            index=models.Index(fields=['turn', 'action_type'], name='game_action_turn_id_c1158f_idx'),
        ),
        migrations.AddIndex(
            model_name='action',
            index=models.Index(fields=['-created_at'], name='game_action_created_a4b083_idx'),
        ),
    ]
